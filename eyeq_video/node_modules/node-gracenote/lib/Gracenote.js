//Dependencies
var GraceError = require('./GraceError');
var request = require('request');
var qs = require('querystring');
var parseString = require('xml2js').parseString;
var	cache = require('memory-cache');
var	API_URL = 'https://c[[CLID]].ipg.web.cddbp.net/webapi/xml/1.0/';

//Locals
var rangeStart = 0;
var rangeEnd = 20;
var rangeSize = 20;
var language = 'eng';
var country = 'usa';
var tvGridChannels = [];

module.exports = Gracenote;



function Gracenote(clientId, clientTag, userId, requestDefaults) {
	if (requestDefaults)
		request = request.defaults(requestDefaults);
		
	var me = this;
	
	
	//Error handling
	if (clientId === null || typeof clientId === 'undefined' || clientId === '')
	{
		throw new GraceError(GraceError.INVALID_INPUT_SPECIFIED, 'clientId');
	}
    if (clientTag === null || typeof clientTag === 'undefined' || clientTag === '')
    {
    	throw new Error(GraceError.INVALID_INPUT_SPECIFIED, 'clientTag');
    }
    
    
    //userId	
    if (typeof userId === 'undefined' || userId === '') {
    	if (cache.get('Gracenote.userId')) {
    		userId = cache.get('Gracenote.userId');
    	} else {
    		userId = null;
    	}
    }

	//Set locals
	this.clientId = clientId;
	this.clientTag = clientTag;
	this.userId = userId;
	this.apiURL = API_URL.replace('[[CLID]]', this.clientId);
	
	
	//-----------------------------------------------------------
	// Methods
	//-----------------------------------------------------------
	this._execute = function(data,type, cb) {
		this._performRequest(data, function(error, response, body) {
			if (error)
				return cb(error);
				
			var xml = me._parseResponse(body,type, function(xml) {				
				cb(null, xml);
			});
		});
	};
	
	this._constructQueryRequest = function(body, command) {
		if (command === null || typeof command === 'undefined' || command === ''){
			command = 'AV_WORK_SEARCH';
		}			
		
		var request = '<QUERIES>'+
						'<AUTH>'+
			                '<CLIENT>' + this.clientId + '-' + this.clientTag + '</CLIENT>'+
			                '<USER>' + this.userId + '</USER>'+
			            '</AUTH>'+			            
			            '<LANG>'+language+'</LANG>'	+
		 				'<COUNTRY>'+country+'</COUNTRY>'+
			            '<QUERY CMD="'+command+'">'+ 
			               	body +
			            '</QUERY>'+
			        '</QUERIES>';
			        
		return request;
	};
	
	
	this._constructQueryBody = function(input, command, matchMode, modeInput) {
		
		var searchType = '';
		
		
		if (command === null || typeof command === 'undefined' || command === ''){
			command = 'AV_WORK_SEARCH';
		}
		
		if (matchMode === null || typeof matchMode === 'undefined' || matchMode === '')
			matchMode = Gracenote.ALL_RESULTS;
		
		
		var body = '';
		
		// MODE
        //------------------------------------------------------
        switch(matchMode){
        	case Gracenote.BEST_MATCH_ONLY:
        		body += '<MODE>SINGLE_BEST</MODE>'; 
        		break;
        	case "TVPROVIDER":
        		body += '<MODE>TVPROVIDER</MODE>'; 
        		break;
        	case "DVBIDS":
        		body += '<MODE>DVBIDS</MODE>'; 
        		break;
        	case "CONTRIBUTOR":
        	case "AV_WORK":
        	case "SERIES":
        	case "SEASON":
        		body += '<MODE>'+matchMode+'</MODE>'; 
        			//Each GNID for contrib, series, etc
        			for (var i=0;i<modeInput.length;i++){
        				var gnid = modeInput[i];
        				body +='<GN_ID>'+ gnid +'</GN_ID>';
        			}	  
        		break;
        	
        }

		// SEARCH TYPES
		//------------------------------------------------------
        switch (command){
        	case "AV_WORK_FETCH":            		
        		body += '<GN_ID>' + input +'</GN_ID>';
        		searchType = "WORK";
        		break;
        	case "AV_WORK_SEARCH":
        		body += '<TEXT TYPE="TITLE">' + input + '</TEXT>'; 
        		searchType = "WORK";
        		break;
        	case "SERIES_FETCH":            		
        		body += '<GN_ID>' + input +'</GN_ID>';
        		searchType = "SERIES";
        		break;
        	case "SERIES_SEARCH":
        		body += '<TEXT TYPE="TITLE">' + input + '</TEXT>'; 
        		searchType = "SERIES";
        		break;
        	case "SEASON_FETCH":        		
        		body += '<GN_ID>' + input +'</GN_ID>';
        		searchType = "SEASON";
        		break;
        	case "CONTRIBUTOR_FETCH":
        		body += '<GN_ID>' + input +'</GN_ID>';
        		searchType = "CONTRIBUTOR";
        		break;  
        	case "CONTRIBUTOR_SEARCH":
        		isContributor = true;
        		body += '<TEXT TYPE="NAME">' + input + '</TEXT>'; 
        		searchType = "CONTRIBUTOR";
        		break;   
        	case "VIDEODISCSET_FETCH":
        		body += '<GN_ID>' + input +'</GN_ID>';
        		searchType = "VIDEODISC";
        		break;  
        	case "VIDEODISCSET_TOC":
        		searchType = "VIDEODISCTOC";
        		break;          
        	case "TVPROVIDER_LOOKUP":
        		body += "<POSTALCODE>"+ input +"</POSTALCODE>";
        		searchType = "TVPROVIDER";           		
        		break;     	    
        	case "TVCHANNEL_LOOKUP":
        	case "TVCHANNEL_FETCH":
        		body +='<GN_ID>'+ input +'</GN_ID>';
        		searchType = "TVCHANNEL";          		
        		break;  
        	case "TVGRID_LOOKUP":
        	case "TVGRID_SEARCH":
        		//input should be in array() format
        		body +='<TVCHANNEL>';
        			for (var i=0;i<input.length;i++){
        				var gnid = input[i];
        				tvGridChannels[i] = gnid;
        				body +='<GN_ID>'+ gnid +'</GN_ID>';
        			}	  
				body +='</TVCHANNEL>';
        		searchType = "TVGRID";          		
        		break;     
        	case "TVPROGRAM_FETCH":
        		body +='<GN_ID>'+ input +'</GN_ID>';
        		searchType = "TVPROGRAM";          		
        		break;   
        		
        }        
        
		
		// SEARCH OPTIONS 
		//------------------------------------------------------
		switch (searchType){
			case "WORK":
				body += '<OPTION>'+
		    			 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
		    	 		 '<VALUE>IMAGE,CONTRIBUTOR_IMAGE,VIDEOPROPERTIES,VIDEODISCSET,VIDEODISCSET_COVERART,VIDEODISCSET_LINK,LINK,TVPROGRAM</VALUE>'+
		    	 		'</OPTION>';
				break;
			case "SERIES":
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>IMAGE,CONTRIBUTOR_IMAGE,LINK</VALUE>'+
	    	 			'</OPTION>';
				break;
			case "SEASON":
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>IMAGE,LINK</VALUE>'+
	    	 			'</OPTION>';
				break;
			case "CONTRIBUTOR":
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>IMAGE,FULL_MEDIAGRAPHY,MEDIAGRAPHY_IMAGES,TVPROGRAM</VALUE>'+
	    	 			'</OPTION>';
				break;
			case "VIDEODISC":
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>COVERART,AV_WORK,AV_WORK_IMAGE,CONTRIBUTOR_IMAGE</VALUE>'+
	    	 			'</OPTION>';
				break;
			case "VIDEODISC":
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>COVERART,AV_WORK,AV_WORK_IMAGE,CONTRIBUTOR_IMAGE</VALUE>'+
	    	 			'</OPTION>';
				break;
			case "VIDEODISCTOC":
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>COVERART,AV_WORK,AV_WORK_IMAGE,CONTRIBUTOR_IMAGE</VALUE>'+
	    	 			'</OPTION>';
				break;
			case "TVCHANNEL":
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>IMAGE,LINK</VALUE>'+
	    	 			'</OPTION>';
				break;
			case "TVGRID":
				body += '<DATE TYPE="START">'+modeInput[0]+'</DATE>'+
 						'<DATE TYPE="END">'+modeInput[1]+'</DATE>';
 						 
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>TVPROGRAM_IMAGE,IPGCATEGORY_IMAGE</VALUE>'+
	    	 			'</OPTION>';
				break;
			case "TVPROGRAM":
				body += '<OPTION>'+
	    				 '<PARAMETER>SELECT_EXTENDED</PARAMETER>'+
	    	 			 '<VALUE>IMAGE,CONTRIBUTOR_IMAGE,IPGCATEGORY_IMAGE,LINK</VALUE>'+
	    	 			'</OPTION>';
				break;
		}
		
				
		// RANGE
        //------------------------------------------------------
        body += '<RANGE>'+
	              '<START>'+rangeStart+'</START>'+
	              '<END>'+ rangeEnd +'</END>'+
	           '</RANGE>';
		

        return body;
	}
	
	this._checkResponse = function(response, cb) {
		response = this._formatXML(response);
		
		parseString(response, function (err, xml) {
			
			if (err !== null)
				throw new GraceError(GraceError.UNABLE_TO_PARSE_RESPONSE);
			
			var status = xml.RESPONSES.RESPONSE[0].$.STATUS;
			
			switch (status) {
	            case "ERROR":    
	            	throw new GraceError(GraceError.API_RESPONSE_ERROR, xml.RESPONSES.MESSAGE[0]); 
	            	break;
	            case "NO_MATCH": 	            	
	            	throw new GraceError(GraceError.API_NO_MATCH); 
	            	break;
	            default:
	                if (status !== "OK") { 
	                	throw new GraceError(GraceError.API_NON_OK_RESPONSE, status);
	                }
	        }
			
			console.log("GN RESPONSE STATUS: "+status);
			
			cb(xml.RESPONSES);
		});
	}
	
	this._parseResponse = function(response,type,cb) {
		
		response = this._formatXML(response);
		console.log(response);
		console.log("Parsing response from Gracenote API...");
		
		parseString(response, function (err, xml) {
			
			if (err !== null)
				throw new GraceError(GraceError.UNABLE_TO_PARSE_RESPONSE);
			
			try {
				me._checkResponse(response, function() {
					var entries;
					
					switch(type){
						case "WORK":
							entries = xml.RESPONSES.RESPONSE[0].AV_WORK;
							break;
						case "SERIES":
							entries = xml.RESPONSES.RESPONSE[0].SERIES;
							break;
						case "SEASON":
							entries = xml.RESPONSES.RESPONSE[0].SEASON;
							break;
						case "CONTRIBUTOR":
							entries = xml.RESPONSES.RESPONSE[0].CONTRIBUTOR;
							break;
						case "VIDEODISCSET":
							entries = xml.RESPONSES.RESPONSE[0].VIDEODISCSET;
							break;
						case "TVPROVIDER":
							entries = xml.RESPONSES.RESPONSE[0].TVPROVIDER;
							break;
						case "TVCHANNEL":
							entries = xml.RESPONSES.RESPONSE[0].TVCHANNEL;
							break;
						case "TVGRID":
							entries = xml.RESPONSES.RESPONSE[0].TVGRID;
							break;
						case "TVPROGRAM":
							entries = xml.RESPONSES.RESPONSE[0].TVPROGRAM;
							break;
							
					}
					
					var output = [];
					var	rangeCountObj = '1';
					var	rangeStartObj = '1';
					var	rangeEndObj = '1';					
					var range;
					range = xml.RESPONSES.RESPONSE[0].RANGE;
				
					if (range){
						rangeCountObj = xml.RESPONSES.RESPONSE[0].RANGE[0].COUNT[0];
						rangeStartObj =xml.RESPONSES.RESPONSE[0].RANGE[0].START[0];
						rangeEndObj = xml.RESPONSES.RESPONSE[0].RANGE[0].END[0];
					}
	
					for (var i = 0; i < entries.length; i++) {
						
						var entry = entries[i];		
						var obj = {
							"obj_type":type,
							//"xml_response": response,
							"range_count":rangeCountObj,
							"range_start":rangeStartObj,
							"range_end":rangeEndObj,
						};			
						
						if (entry.GN_ID)
							obj.gnid = entry.GN_ID[0];
						
						if (entry.TITLE)
							obj.title = entry.TITLE[0];	
						
						if (entry.DURATION)
							obj.duration_sec = me._getAttribElem(entry.DURATION, "UNITS", "SEC");
							
						if (entry.PRODUCTION_TYPE)
							obj.production_type = me._getOETElem(entry.PRODUCTION_TYPE);
							
						if (entry.SYNOPSIS)
							obj.synopsis = entry.SYNOPSIS[0];
							
						if (entry.EPISODE_NUM)
							obj.episode_num = entry.EPISODE_NUM[0];
							
						if (entry.GENRE)
				            obj.genres = me._getOETElem(entry.GENRE);
	
						if (entry.VIDEOAUDIENCE)
				            obj.video_audience = me._getOETElem(entry.VIDEOAUDIENCE);
				 									
						if (entry.VIDEOMOOD) 
				            obj.video_mood = me._getOETElem(entry.VIDEOMOOD);						
						
						if (entry.VIDEOREPUTATION) 				
							obj.video_reputation = me._getOETElem(entry.VIDEOREPUTATION);
						
						if (entry.VIDEOSCENARIO) 				
							obj.video_scenario = me._getOETElem(entry.VIDEOSCENARIO);
							
						if (entry.VIDEOSETTINGENVIRONMENT) 				
							obj.video_setting_environment = me._getOETElem(entry.VIDEOSETTINGENVIRONMENT);
						
						if (entry.VIDEOSETTINGPERIOD) 				
							obj.video_setting_period = me._getOETElem(entry.VIDEOSETTINGPERIOD);
							
						if (entry.VIDEOSOURCE) 				
							obj.video_source = me._getOETElem(entry.VIDEOSOURCE);		
							
						if (entry.VIDEOSTYLE) 				
							obj.video_style = me._getOETElem(entry.VIDEOSTYLE);
							
						if (entry.VIDEOTOPIC) 				
							obj.video_topic = me._getOETElem(entry.VIDEOTOPIC);	
							
						if (entry.VIDEOSTORYTYPE) 				
							obj.video_story_type = me._getOETElem(entry.VIDEOSTORYTYPE);		
									
						if(entry.XID)
							obj.external_ids = me._getOETElem(entry.XID);
						
						//EPG
						if (entry.LISTING)
							obj.listing = entry.LISTING[0];
							
						if (entry.DATE)
							obj.production_end = me._getAttribElem(entry.DATE, "TYPE", "PRODUCTIONEND");
						
						if (entry.EPGPRODUCTION_TYPE)
							obj.epg_production_type = me._getOETElem(entry.EPGPRODUCTION_TYPE);
						
						if (entry.IPGCATEGORY){
							if(entry.IPGCATEGORY[0].IPGCATEGORY_L1)
								obj.ipgcategory_l1 = me._getOETElem(entry.IPGCATEGORY[0].IPGCATEGORY_L1);
							
							if(entry.IPGCATEGORY[0].IPGCATEGORY_L2)
								obj.ipgcategory_l2 = me._getOETElem(entry.IPGCATEGORY[0].IPGCATEGORY_L2);
						}
							
						if (entry.RANK)
							obj.rank = entry.RANK[0];
						
						if (entry.GROUPREF)
							obj.groupref = entry.GROUPREF[0];
		
							
							
						if (type != 'CONTRIBUTOR' && type != 'TVCHANNEL' && type != 'TVPROGRAM'){
							
							if (entry.DATE)
								obj.date_original_release = me._getAttribElem(entry.DATE, "TYPE", "ORIGINALRELEASE");
							
							if(entry.URL)
								obj.video_image_url = me._getAttribElem(entry.URL, "TYPE", "IMAGE");
						}
						
						
						//Specific to contributor search
						//------------------------------------------------------	
						if (type == 'CONTRIBUTOR'){
							
							if(entry.NAME)
								obj.name =entry.NAME[0];
							
							if(entry.BIOGRAPHY)
								obj.biography =entry.BIOGRAPHY[0];
								
							if(entry.DATE)
								obj.birth_date = me._getAttribElem(entry.DATE, "TYPE", "BIRTH");
							
							if(entry.PLACE)
								obj.birth_place = me._getAttribElem(entry.PLACE, "TYPE", "BIRTH");
								
							if (entry.CONTRIBUTOR_TYPE) 				
								obj.contributor_type = me._getOETElem(entry.CONTRIBUTOR_TYPE);	
								
							if(entry.URL)
								obj.contributor_image_url = me._getAttribElem(entry.URL, "TYPE", "IMAGE");
								
							if(entry.MEDIAGRAPHY){
								var mediagraphy = [];		
								var mCount = 0;
								if (entry.MEDIAGRAPHY[0].AV_WORK){
									 for (var x = 0; x < entry.MEDIAGRAPHY[0].AV_WORK.length; x++) {	
									 	var instance = entry.MEDIAGRAPHY[0].AV_WORK[x];	
					            		var val = me._getMediagraphy(instance, "work");
				            			mediagraphy.push(val);
				            			mCount++;
						              }
								}
				           			
				           		if (entry.MEDIAGRAPHY[0].SERIES){          	
					            	for (var x = 0; x < entry.MEDIAGRAPHY[0].SERIES.length; x++) {	
									 	var instance = entry.MEDIAGRAPHY[0].SERIES[x];	
					            		var val = me._getMediagraphy(instance, "series");
				            			mediagraphy.push(val);
				            			mCount++;
						              }
								}				           		
								
								obj.mediagraphy_count = mCount;
					            obj.mediagraphy = mediagraphy;	
							}							
						}
												
								
						// RATINGS
						//------------------------------------------------------						
						if (entry.RATING) {
							var ratings = [];
							for (var x = 0; x < entry.RATING.length; x++) {				            	
				            	var r = entry.RATING[x];			
				                var rating = {
			                		'rating_system': r.SYSTEM[0],
					                'rating_code': r.CODE[0],
				                };
	
				                if (r.REASON)
				                	rating.rating_reason = r.REASON[0];
	
				                ratings.push(rating);
				            }
				            
				            obj.ratings = ratings;	
						}
						
								
						// CONTRIBUTOR
						//------------------------------------------------------	
						if (entry.CONTRIBUTOR) {
							var contributors = [];	
							var contribCount = 0;							
							for (var x = 0; x < entry.CONTRIBUTOR.length; x++) {
				            	var c = entry.CONTRIBUTOR[x];
				 				var contributor = {
				 					'name': c.NAME[0],				 							 					
				 				};
				 				
				 				if (c.GN_ID){
				 					contributor.gnid = c.GN_ID[0];
				 				}
				 				
				 				if (c.URL){
				 					contributor.image_url = c.URL[0]._;
				 				}
				 				
				 				if (c.CONTRIBUTION){
	
				 					if (c.CONTRIBUTION[0].CONTRIBUTION_TYPE)
				 						contributor.contribution_type = c.CONTRIBUTION[0].CONTRIBUTION_TYPE[0]._;
				 						
				 					if (c.CONTRIBUTION[0].CHARACTER)
				 						contributor.contribution_character = c.CONTRIBUTION[0].CHARACTER[0];
				 				}
				 				
				 				contributors.push(contributor);
				 				contribCount++;
				            }
				            obj.contributor_count = contribCount;
				            obj.contributors = contributors;	
						}
										
						
						
						// VIDEODISCSET
						//------------------------------------------------------	
						if (entry.VIDEODISCSET) {
							var discset = [];			
							var discCount = 0;					
							for (var x = 0; x < entry.VIDEODISCSET.length; x++) {
				            	var d = entry.VIDEODISCSET[x];
				 				var disc = {
				 					'gnid': d.GN_ID[0],				 							 					
				 				};
				 				
				 				if (d.TITLE)
				 					disc.title = d.TITLE[0];
				 					
				 				if (d.EDITION)
				 					disc.edition = d.EDITION[0];
				 				
				 				if (d.ASPECT_RATIO)
				 					disc.aspect_ratio = d.ASPECT_RATIO[0]._;
				 								 				
				 				if (d.URL)
				 					disc.cover_url = d.URL[0]._;
				 					
				 				if (d.XID)
				 					disc.xids = me._getOETElem(d.XID);
				 				
				 								 				
				 				discset.push(disc);	
				 				discCount++;			 				
				            }
				            obj.video_disc_count = discCount;	
				           	obj.video_disc_set = discset;	
						}
										
						
						
						// AV_WORK
						//------------------------------------------------------						
						if (entry.AV_WORK) {
							var works = [];
							var workCount = 0;
							for (var x = 0; x < entry.AV_WORK.length; x++) {				            	
				            	var w = entry.AV_WORK[x];			
				                var work = {
			                		'gnid': w.GN_ID[0]
				                };	
				                
				                if(w.TITLE)
				                	work.title = w.TITLE[0];
				                
				                if (w.EPISODE_NUM)
				 					work.episode_num = w.EPISODE_NUM[0]._;				 					
				 					
				                works.push(work);
				                workCount++;
				            }
				            
				            obj.work_count = workCount;
				            obj.works = works;
						}
								
												
						// SEASON
						//------------------------------------------------------						
						if (entry.SEASON) {
							var seasons = [];
							var seasonCount = 0;
							for (var x = 0; x < entry.SEASON.length; x++) {				            	
				            	var s = entry.SEASON[x];			
				                var season = {
			                		'gnid': s.GN_ID[0],
					                'title': s.TITLE[0],					                
				                };	
				                
				                if (s.SEASON_NUM)
				                	season.season_num = s.SEASON_NUM[0];
				                
				                seasons.push(season);
				                seasonCount++;
				            }
				            
				            obj.season_count = seasonCount;
				            obj.seasons = seasons;
						}
	
						// SERIES
						//------------------------------------------------------
						if (entry.SERIES) {
							var series = [];
							var seriesCount = 0;
							for (var x = 0; x < entry.SERIES.length; x++) {				            	
				            	var s = entry.SERIES[x];			
				                var ser = {
			                		'gnid': s.GN_ID[0],
					                'title': s.TITLE[0],
				                };	
				                series.push(ser);
				                seriesCount++;
				            }
				            
				            obj.series_count = seriesCount;
				            obj.series = series;
						}	
										
						
						if (type == 'TVPROVIDER'){
							
							if (entry.NAME)
								obj.provider_name = entry.NAME[0];
								
							if (entry.PROVIDERTYPE)
								obj.provider_type = entry.PROVIDERTYPE[0];
								
							if (entry.PLACE)
								obj.provider_place = entry.PLACE[0];
							
							if (entry.NATIONAL)
								obj.provider_national = entry.NATIONAL[0];
						}
						
						
						if (type == 'TVCHANNEL'){
							
							if (entry.NAME)
								obj.channel_name = entry.NAME[0];
								
							if (entry.NAME_SHORT)
								obj.channel_name_short = entry.NAME_SHORT[0];
								
							if (entry.COUNTRY)
								obj.channel_country = entry.COUNTRY[0];
							
							if (entry.CALLSIGN)
								obj.channel_callsign = entry.CALLSIGN[0];
								
							if (entry.CHANNEL_NUM)
								obj.channel_number = entry.CHANNEL_NUM[0];
								
							if (entry.RANK)
								obj.channel_rank = entry.RANK[0];
								
							if (entry.URL)
								obj.channel_image_url = me._getAttribElem(entry.URL, "TYPE", "IMAGE");
						}
						
						
						if (type == "TVPROGRAM"){
							
							if (entry.URL){			
													
								if(entry.URL[0].$['TYPE'] == "IMAGE"){
									obj.image_url = me._getAttribElem(entry.URL, "TYPE", "IMAGE");
									obj.ipgcategory_image_url = me._getAttribElem(entry.URL, "TYPE", "IPGCATEGORY_IMAGE");
								}										
								else{
									obj.ipgcategory_image_url = me._getAttribElem(entry.URL, "TYPE", "IPGCATEGORY_IMAGE");
								}
							}
						}
						
						if (type == "TVGRID"){
							var channels = [];
							for (var i=0; i < tvGridChannels.length; i++){
								channels.push(tvGridChannels[i]);
							}
							obj.channels = channels;
						}
						
						// TVProgram
						//------------------------------------------------------
						if (entry.TVPROGRAM) {
							var programs = [];
							var programCount = 0;
							for (var x = 0; x < entry.TVPROGRAM.length; x++) {				            	
				            	var inst = entry.TVPROGRAM[x];
								var prog = {
									'order':x,
						        	'gnid': inst.GN_ID[0],
						    		'title': inst.TITLE[0],
						        };	
						        
								if (inst.LISTING)
									prog.listing = inst.LISTING[0];
									
								if (inst.DATE)
									prog.production_end = me._getAttribElem(inst.DATE, "TYPE", "PRODUCTIONEND");
								
								if (inst.EPGPRODUCTION_TYPE)
									prog.epg_production_type = me._getOETElem(inst.EPGPRODUCTION_TYPE);
								
								if (inst.IPGCATEGORY){
									prog.ipgcategory_l1 = me._getOETElem(inst.IPGCATEGORY[0].IPGCATEGORY_L1);
									prog.ipgcategory_l2 = me._getOETElem(inst.IPGCATEGORY[0].IPGCATEGORY_L2);
								}
									
								if (inst.RANK)
									prog.rank = inst.RANK[0];
								
								if (inst.GROUPREF)
									prog.groupref = inst.GROUPREF[0];
								
								if (inst.URL){
									
									if(inst.URL[0].$['TYPE'] == "IMAGE"){
										prog.image_url = me._getAttribElem(inst.URL, "TYPE", "IMAGE");
										prog.ipgcategory_image_url = me._getAttribElem(inst.URL, "TYPE", "IPGCATEGORY_IMAGE");
									}										
									else{
										prog.ipgcategory_image_url = me._getAttribElem(inst.URL, "TYPE", "IPGCATEGORY_IMAGE");
									}	
								}
						
				                programs.push(prog);
				                programCount++;
			           		}
			            
				            obj.tv_program_count = programCount;
				            obj.tv_programs = programs;						
						}	
						
						
						// TVAiring
						//------------------------------------------------------
						if (entry.TVAIRING) {
							var airings = [];
							var airingCount = 0;
							for (var x = 0; x < entry.TVAIRING.length; x++) {				            	
				            	var a = entry.TVAIRING[x];			
				                var air = {
				                	'order':x,
				                	'tv_channel_gnid': a.$['TVCHANNEL_GN_ID'],
			                		'tv_program_gnid': a.$['TVPROGRAM_GN_ID'],
			                		'start':a.$['START'],
			                		'end':a.$['END'],
				                };	
				                
				                if (a.EPGVIEWING_TYPE)
				                	air.epg_viewing_type = a.EPGVIEWING_TYPE[0].$['ID'];
				                
				                if (a.EPGCAPTION_TYPE)
				                	air.epg_caption_type = a.EPGCAPTION_TYPE[0].$['ID'];
				                
				                if (a.EPGAUDIO_TYPE)
				                	air.epg_audio_type = a.EPGAUDIO_TYPE[0].$['ID'];
				                
				                if(a.RATING){
				                	
				                	if(a.RATING[0].SYSTEM)
				                		air.rating_sysyem = a.RATING[0].SYSTEM[0];
				                	
				                	if(a.RATING[0].CODE)
				                		air.rating_code = a.RATING[0].CODE[0];
				                }

				               airings.push(air);
				               airingCount++;
				            }

				            obj.tv_airing_count = airingCount;
				            obj.tv_airings = airings;
						}
											
						
						// PUSH RESULT
						//------------------------------------------------------						
						output.push(obj);
					}
					
					console.log(output)
					cb(output);
				});
			}
			catch (err) {
				if (err.statusCode == GraceError.API_NO_MATCH){
					cb([]);
				}					
			}
			
			console.log("Done parsing Gracenote response!");
		});
	}
	
	
	
	this._getMediagraphy = function(inst, objType) {

        var out = {
        	'gnid': inst.GN_ID[0],
        	'type': objType,       		                
        };
        
        if (inst.TITLE){
        	out.title = inst.TITLE[0];

        	if (!inst.TITLE[0].length){
        		out.title = inst.TITLE[0]._;        		
        	}
        }
        	
        if (inst.DATE)
        	out.date_original_release = me._getAttribElem(inst.DATE, "TYPE", "ORIGINALRELEASE");
        	
        if (inst.CONTRIBUTION){
        	if (inst.CONTRIBUTION[0].CONTRIBUTION_TYPE)
				out.contribution_type = inst.CONTRIBUTION[0].CONTRIBUTION_TYPE[0]._;
			
			if (inst.CONTRIBUTION[0].CHARACTER)
				out.contribution_character = inst.CONTRIBUTION[0].CHARACTER[0];
        }	
        
        if (inst.URL)
        	out.image_url = me._getAttribElem(inst.URL, "TYPE", "IMAGE");
        

		return out;
	}
	
	
	this._getAttribElem = function(root, attribute, value) {
		for (var i = 0; i < root.length; i++) {
			var r = root[i];			
            if (r.$[attribute] == value) { return r._; }
        }
		return "";
	}
	
	
	this._getOETElem = function(root) {
		var out = [];
		for (var i = 0; i < root.length; i++) {
			var r = root[i];			
			var obj = {
				'text': r._,
			};
			
			if (r.$.ID)
				obj.id = r.$.ID;
				
			if (r.$.DATASOURCE)
				obj.source = r.$.DATASOURCE;				
			
			out.push(obj);			
        }
        return out;
	}
	
	this._performRequest = function(body, cb) {
		request({
		    url: this.apiURL,
		    body: body,
		    method: 'POST',
		    headers: {
		        'User-Agent': 'nodejs-gracenote'
		    }
		}, cb)
	},
	
	this._formatXML = function(response) {
		response = response.replace(/\r\n+|\r\n|\n+|\n|\s+|\s$/, '');
		return response;
	}

	this._checkMatchMode = function(matchMode){		
		var mMode;
		if (matchMode === null || typeof matchMode === 'undefined' || matchMode === ''){
			mMode = Gracenote.ALL_RESULTS;
		}else{
			mMode = matchMode;
		}		
		return mMode;		
	}
	
	this._checkModeInput = function(modeInput){		
		var mInput;
		if (modeInput === null || typeof modeInput === 'undefined' || modeInput === ''){
			mInput = "";
		}else{
			mInput = modeInput;
		}		
		
		return mInput;		
	}
}


Gracenote.prototype.register = function(cb) {
	var me = this;
	
	if (this.userId !== null) {
        console.warn('Warning: You already have a userId, no need to register another. Using current ID.');
        return this.userId;
    }
	
	var data = '<QUERIES>'+
		        '<QUERY CMD="REGISTER">'+
		           '<CLIENT>' + this.clientId + '-' + this.clientTag + '</CLIENT>'+
		        '</QUERY>'+
		     '</QUERIES>';
	
	this._performRequest(data, function(error, response, body) {
		if (error) return cb(error);
		var xml = me._checkResponse(body, function(xml) {
			me.userId = xml.RESPONSE[0].USER[0];
			cache.put('Gracenote.userId',me.userId);
			cb(null, me.userId);
		});
	});
}

Gracenote.prototype.setRange = function(start, end) {
	
	if (start) {
		rangeStart = start;
				
		if (!end)
			rangeEnd = Number(start) + Number(rangeSize);
	}
	
	if (end){
		rangeEnd = end;
	}
	
	console.log("Set Range Start to " + rangeStart);
	console.log("Set Range End to " + rangeEnd);
}

// ---------------------------------------------------------------------
// VIDEO
// ---------------------------------------------------------------------
Gracenote.prototype.fetchWork = function(gnid, matchMode, modeInput, cb) {
	var matchMode = this._checkMatchMode(matchMode);
	var modeInput = this._checkModeInput(modeInput);
	var body = this._constructQueryBody(gnid,"AV_WORK_FETCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "AV_WORK_FETCH");
    	
    this._execute(data,"WORK", cb);
}

Gracenote.prototype.searchWork = function(workTitle, matchMode, modeInput, cb) {
	var matchMode = this._checkMatchMode(matchMode);
	var modeInput = this._checkModeInput(modeInput);
	var body = this._constructQueryBody(workTitle,"AV_WORK_SEARCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "AV_WORK_SEARCH");
    	
    this._execute(data,"WORK", cb);
}

Gracenote.prototype.searchSeries = function(seriesTitle, matchMode, modeInput, cb) {
	var matchMode = this._checkMatchMode(matchMode);
	var modeInput = this._checkModeInput(modeInput);
	var body = this._constructQueryBody(seriesTitle, "SERIES_SEARCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "SERIES_SEARCH");

    this._execute(data,"SERIES", cb);
}

Gracenote.prototype.fetchSeries = function(gnid, matchMode, modeInput, cb) {
	var matchMode = this._checkMatchMode(matchMode);
	var modeInput = this._checkModeInput(modeInput);
	var body = this._constructQueryBody(gnid, "SERIES_FETCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "SERIES_FETCH");

    this._execute(data,"SERIES", cb);
}

Gracenote.prototype.fetchSeason = function(gnid, matchMode, modeInput, cb) {
	var matchMode = this._checkMatchMode(matchMode);
	var modeInput = this._checkModeInput(modeInput);
	var body = this._constructQueryBody(gnid, "SEASON_FETCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "SEASON_FETCH");

    this._execute(data,"SEASON", cb);
}

Gracenote.prototype.searchContributor = function(contributorName, matchMode, modeInput, cb) {
	var matchMode = this._checkMatchMode(matchMode);
	var modeInput = this._checkModeInput(modeInput);
	var body = this._constructQueryBody(contributorName, "CONTRIBUTOR_SEARCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "CONTRIBUTOR_SEARCH");

    this._execute(data,"CONTRIBUTOR", cb);
}

Gracenote.prototype.fetchContributor = function(gnid, matchMode, modeInput, cb) {
		var matchMode = this._checkMatchMode(matchMode);
		var modeInput = this._checkModeInput(modeInput);
		var body = this._constructQueryBody(gnid, "CONTRIBUTOR_FETCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "CONTRIBUTOR_FETCH");

    this._execute(data,"CONTRIBUTOR", cb);
}

Gracenote.prototype.fetchDisc = function(gnid, matchMode, modeInput,cb) {
		var matchMode = this._checkMatchMode(matchMode);
		var modeInput = this._checkModeInput(modeInput);
		var body = this._constructQueryBody(gnid, "VIDEODISCSET_FETCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "VIDEODISCSET_FETCH");

    this._execute(data,"VIDEODISCSET", cb);
}

// ---------------------------------------------------------------------
// EPG
// ---------------------------------------------------------------------
Gracenote.prototype.tvProviderLookup = function(postalCode, matchMode, modeInput, cb) {
		var matchMode = this._checkMatchMode(matchMode);
		var modeInput = this._checkModeInput(modeInput);
		var body = this._constructQueryBody(postalCode, "TVPROVIDER_LOOKUP", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "TVPROVIDER_LOOKUP");

    this._execute(data,"TVPROVIDER", cb);
}

Gracenote.prototype.tvChannelLookup = function(gnid, matchMode, modeInput, cb) {
		var matchMode = this._checkMatchMode(matchMode);
		var modeInput = this._checkModeInput(modeInput);
		var body = this._constructQueryBody(gnid, "TVCHANNEL_LOOKUP", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "TVCHANNEL_LOOKUP");

    this._execute(data,"TVCHANNEL", cb);
}

Gracenote.prototype.tvChannelFetch = function(gnid, matchMode, modeInput, cb) {
		var matchMode = this._checkMatchMode(matchMode);
		var modeInput = this._checkModeInput(modeInput);
		var body = this._constructQueryBody(gnid, "TVCHANNEL_FETCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "TVCHANNEL_FETCH");

    this._execute(data,"TVCHANNEL", cb);
}

Gracenote.prototype.tvGridLookup = function(gnid, matchMode, modeInput, cb) {
		var matchMode = this._checkMatchMode(matchMode);
		var modeInput = this._checkModeInput(modeInput);
		var body = this._constructQueryBody(gnid, "TVGRID_LOOKUP", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "TVGRID_LOOKUP");

    this._execute(data,"TVGRID", cb);
}

Gracenote.prototype.tvProgramFetch = function(gnid, matchMode, modeInput, cb) {	
		var matchMode = this._checkMatchMode(matchMode);
		var modeInput = this._checkModeInput(modeInput);
		var body = this._constructQueryBody(gnid, "TVPROGRAM_FETCH", matchMode, modeInput),
    	data = this._constructQueryRequest(body, "TVPROGRAM_FETCH");

    this._execute(data,"TVPROGRAM", cb);
}


Gracenote.BEST_MATCH_ONLY = 0;
Gracenote.ALL_RESULTS = 1;









